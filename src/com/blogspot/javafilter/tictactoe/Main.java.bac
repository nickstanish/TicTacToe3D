
package merrychristmas;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.*;

/**
 * authored by Nick STANISH
 * Less but still BRUTAL EDITION :]
 * g'luck
 * @author program
 */
public class Main extends JFrame{
    private static class Controller extends JPanel{
    private ButtonGroup buttongroup;
    private JRadioButton opt1,opt2;    
    private static JLabel x,o,options, wins;
    private JButton resetButton,newButton;
    private static int xWins, oWins = 0;
    File file;
    Image xImage, oImage;
    ImageIcon xIcon, oIcon;
    Controller(){
        setPreferredSize(new Dimension(150, 500));
        setBackground(Color.lightGray);
        initComponents();
    }
    private static void xWins(){
        xWins++;
        x.setText(": " + xWins);
    }
    private static void oWins(){
        oWins++;
        o.setText(": " + oWins);
    }
    private void initComponents(){
        try{
            file = new File("media/xIcon.png");
            xImage = ImageIO.read(file);
            file = new File("media/oIcon.png");
            oImage = ImageIO.read(file); 
        }
        catch(IOException ie){
            System.err.println(ie);
        }
        
        xIcon = new ImageIcon(xImage);
        oIcon = new ImageIcon(oImage);
        resetButton = new JButton("Reset");
        resetButton.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e) {
            resetButtonActionPerformed();
            }
        });
        newButton = new JButton("New Game");
        newButton.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e) {
            newButtonActionPerformed();
            }
        });
        buttongroup = new ButtonGroup();
        opt1 = new JRadioButton("Human vs Human");
        opt1.setBackground(Color.lightGray);
        opt2 = new JRadioButton("Human vs Computer");
        opt2.setBackground(Color.lightGray);
        opt2.setEnabled(false);
        buttongroup.add(opt1);
        buttongroup.add(opt2);
        opt1.setSelected(true);
        x = new JLabel(": 0");
        o = new JLabel(": 0");
        o.setIcon(oIcon);
        x.setIcon(xIcon);
        options = new JLabel("Options");
        wins = new JLabel("WINS        ");
        Panel[] pane = new Panel[5];
        for(int z = 0; z < 5; z++){
            pane[z] = new Panel();
        }
        pane[0].setLayout(new BoxLayout(pane[0],BoxLayout.PAGE_AXIS));
        pane[0].add(Box.createRigidArea(new Dimension(0,10)));
        pane[0].add(wins);
        pane[0].add(Box.createRigidArea(new Dimension(0,4)));
        pane[0].add(x);
        pane[0].add(o);
        pane[0].add(Box.createRigidArea(new Dimension(0,6)));
        pane[0].add(resetButton);
        pane[0].add(Box.createRigidArea(new Dimension(0,20)));
        pane[1].setLayout(new BoxLayout(pane[1],BoxLayout.PAGE_AXIS));
        pane[1].add(Box.createRigidArea(new Dimension(0,100)));
        pane[1].add(options);
        pane[1].add(Box.createRigidArea(new Dimension(0,6)));
        pane[1].add(opt1);
        pane[1].add(opt2);
        pane[1].add(Box.createRigidArea(new Dimension(0,6)));
        pane[1].add(newButton);
        add(pane[0]);
        add(pane[1]);
        
    }
    private void resetButtonActionPerformed(){
        xWins = 0;
        oWins = 0;
        x.setText(": " + xWins);
        o.setText(": " + oWins);
    }
    private void newButtonActionPerformed(){
        if (opt1.isSelected()){
            GameBoard.Clear();
        }
        else{
            //new computer game
        }
    }
  
}
    


private static class GameBoard extends Canvas{

private static int win;
private int y = 40, x = 40;
private int xWins,oWins = 0;
private  boolean Xturn = true;
private static int[][][] grid = new int[3][3][3];
private boolean doOnce = true;
private static boolean repaintPlease = false;
private Image mImage;
private File file;
private BufferedImage background, xImage, circleImage, turnImage, winImage, xIcon, oIcon, refresh;
javax.swing.Timer repaintTimer = new javax.swing.Timer(850, new ActionListener() {
          public void actionPerformed(ActionEvent e) {
              if(repaintPlease){
                    repaint();
                    repaintPlease = false;
              }
       
          }
       });
//***********************************************************
public static void Clear(){
    
    
            for (int p = 0; p < 3; p++)
            {
            for ( int q = 0; q<3; q++){
                for(int r = 0; r < 3; r++){
                grid[p][q][r] = 0;

               	 }
                }
	}
            win = 0;
            repaintPlease = true;
            }
//***********************************************************

public int switchTurns(){
int number;

    if (Xturn){

    Xturn = false;
        number = 1; //x
}
 else{
    number = -1; //y
 Xturn = true;
    }
 return number;
        }
//***********************************************************
private int check(){
//supposedly checks for every given combination for every grid
    outside:
 for (int g = 0; g < 3; g++){
     //diagonals across planes
      if ( (grid[0][0][g] == grid[1][1][g]) && (grid[1][1][g] == grid[2][2][g]) && (grid[0][0][g] != 0 )){
                win = grid[0][0][g];
                 break outside;
                }
      if ( (grid[0][2][g] == grid[1][1][g]) && (grid[1][1][g] == grid[2][0][g]) && (grid[0][2][g] != 0 )){
                win = grid[0][2][g];
                 break outside;
                }
      if ( (grid[0][g][0] == grid[1][g][1]) && (grid[1][g][1] == grid[2][g][2]) && (grid[0][g][0] != 0 )){
                win = grid[0][g][0];
                 break outside;
                }
      if ( (grid[0][g][2] == grid[1][g][1]) && (grid[1][g][1] == grid[2][g][0]) && (grid[0][g][2] != 0 )){
                win = grid[0][g][2];
                 break outside;
                }
      //diagonals diagonally across
      if (g == 0){       
        if (grid[1][1][1] !=0){
            if ( (grid[0][0][0] == grid[1][1][1]) && (grid[1][1][1] == grid[2][2][2])){
                win = grid[1][1][1];
                 break outside;
                }
            if ( (grid[0][2][0] == grid[1][1][1]) && (grid[1][1][1] == grid[2][0][2])){
                win = grid[1][1][1];
                 break outside;
                }
            if ( (grid[0][0][2] == grid[1][1][1]) && (grid[1][1][1] == grid[2][2][0])){
                win = grid[1][1][1];
                 break outside;
                }
            if ( (grid[0][2][2] == grid[1][1][1]) && (grid[1][1][1] == grid[2][0][0])){
                win = grid[1][1][1];
                 break outside;
                }

        }
      }

    for (int h = 0; h < 3; h++){
        //horizontal and vertical

        if ( (grid[g][h][0] == grid[g][h][1]) && (grid[g][h][1] == grid[g][h][2]) && (grid[g][h][0] != 0 )){
                win = grid[g][h][2];
                 break outside;
                }
        if ( (grid[g][0][h] == grid[g][1][h]) && (grid[g][1][h] == grid[g][2][h]) && (grid[g][0][h] != 0)){
                win = grid[g][0][h];
                 break outside;
                }
             //directly across 3 planes
        if ((grid[0][g][h] == grid[1][g][h]) && (grid[1][g][h] == grid[2][g][h]) && (grid[0][g][h] != 0)) {
                  win = grid[0][g][h];
                  break outside;
                }
        
         }
      //diagonal
            if ( (grid[g][0][0] == grid[g][1][1]) && (grid[g][1][1] == grid[g][2][2]) && (grid[g][0][0] != 0)){
            win = grid[g][0][0];
             break outside;

             }
            if ( (grid[g][0][2] == grid[g][1][1]) && (grid[g][1][1] == grid[g][2][0]) && (grid[g][0][2] != 0 )){
            win = grid[g][0][2];
             break outside;
            }

    }

return win;
}
//***********************************************************
public void checkWin(){
    win = check();
    System.out.println("win = " + win);
}
//***********************************************************
private class GameListener implements MouseListener {
    public void mouseClicked(MouseEvent e){}
    public void mousePressed (MouseEvent e){
        int mouseX = e.getPoint().x;
        int mouseY = e.getPoint().y;
        if (win == 0){
            for (int c =0; c < 3; c++){
                if (mouseX > (x * (c + 1)) && mouseX < (x * (c + 4)) && mouseY > (y * (1+ (4*c))) && mouseY < (y*(4*(c+1)))){
                    for (int a = 0; a <3; a++){
                        for (int b = 0; b <3; b++){
                            if ((mouseX > ((a+1 +c) * x)) && (mouseX < ((a+2 + c)*x)) && (mouseY > ((b+1+(4*c))*y)) && (mouseY < ((b+2+(4*c))*y) )){
                                if(grid[c][a][b] == 0){
                                    grid[c][a][b] = switchTurns();
                                    System.out.println(grid[c][a][b]);
                                    System.out.println("a: "+c + " b: " + a + " c: " + b);
                                }
                            }
                        }
                    }
                }
            }
            checkWin();
            repaint();
        }
        else{
            if (mouseX > 230 && mouseX < 270 && mouseY > 50 && mouseY < 90){
                Clear();
                
            }
        }
        if(repaintPlease){
            repaint();
        }
    }
    public void mouseReleased(MouseEvent e){}
    public void mouseEntered(MouseEvent e){}
    public void mouseExited (MouseEvent e){}
}
        //***********************************************************
        public GameBoard(){
        setPreferredSize(new Dimension(350, 500));
        setBackground(Color.lightGray);
        addMouseListener(new GameListener());
        Clear();

        }
        @Override
        	   public void paint (Graphics g)
	   	{	 //refreshCount++;
	   		 Dimension d = getSize();
	   		 checkOffscreenImage();
	   		 Graphics offG = mImage.getGraphics();
	   		 offG.setColor(getBackground());
	   		 offG.fillRect(0, 0, d.width, d.height);
	   		 paintOffscreen(mImage.getGraphics());
	      	 g.drawImage(mImage, 0, 0, null);
	   	}
	   	private void checkOffscreenImage() {
	   	    Dimension d = getSize();
	   	    if (mImage == null || mImage.getWidth(null) != d.width
	   	        || mImage.getHeight(null) != d.height) {
	   	      mImage = createImage(d.width, d.height);
	   	    }
	   	  }

	   public void paintOffscreen(Graphics g) {
		   if(doOnce){
                       
    try{
    file = new File("media/background.png");
    background = ImageIO.read(file);
    file = new File("media/circle1.png");
    circleImage = ImageIO.read(file);
    file = new File("media/x1.png");
    xImage = ImageIO.read(file);
    file = new File("media/turn.png");
    turnImage = ImageIO.read(file);
    file = new File("media/win.png");
    winImage = ImageIO.read(file);
    file = new File("media/xIcon.png");
    xIcon = ImageIO.read(file);
    file = new File("media/oIcon.png");
    oIcon = ImageIO.read(file);
    file = new File("media/refresh.png");
    refresh = ImageIO.read(file);
    repaintTimer.start();

    
}
catch(IOException ie){
    System.out.println("io error" + ie);
}
    doOnce = false;
            }
g.drawImage(background, 0,0,null);   
g.setColor(Color.BLACK);
g.drawImage(null, x, y, null);
if( win == 0){
    g.drawImage(turnImage, 190,10,null);
    if (Xturn){
        g.drawImage(xIcon, 280,10,null);
    }
    else{
        g.drawImage(oIcon, 280,10,null);
    }
}
else {
    g.drawImage(winImage, 190,10,null);
    g.drawImage(refresh, 230, 50, null);
    if (win == 1){
        g.drawImage(xIcon, 280,10,null);
        xWins++;
        Controller.xWins();
        System.out.println("x: " + xWins + " o: " + oWins);
    }
    else{
        g.drawImage(oIcon, 280,10,null);
        oWins++;
        Controller.oWins();
        System.out.println("x: " + xWins + " o: " + oWins);
    }
 }

            for(int a = 0; a <3; a ++){
                for (int b = 0; b < 3; b++) {
                    if (grid[0][a][b] == 1){
                    g.drawImage(xImage,x+a*x,x+b*x,null);
                    }
                    if (grid[0][a][b] == -1){
                    g.drawImage(circleImage,x+a*x,x+b*x,null);
                    }
                    if (grid[1][a][b] == 1){
                    g.drawImage(xImage,x*2+a*x,x*5+b*x,null);
                    }
                    if (grid[1][a][b] == -1){
                    g.drawImage(circleImage,x*2+a*x,x*5+b*x,null);
                    }
                    if (grid[2][a][b] == 1){
                    g.drawImage(xImage,x*3+a*x,x*9+b*x,null);

                    }
                    if (grid[2][a][b] == -1){
                    g.drawImage(circleImage,x*3+a*x,x*9+b*x,null);

                    }
                }
               }
            g.drawLine(160,160,240,480);

	   }
    }
    public static void main(String[] args) {
    new Main();
    

    }
    Main(){
        setTitle("Tic Tac Toe 3D Perspective");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        GameBoard board = new GameBoard();
        Controller control = new Controller();
        JPanel mainpanel = new JPanel();
        mainpanel.setBackground(Color.lightGray);
        mainpanel.setMinimumSize(new Dimension(500,500));
        mainpanel.setMaximumSize(new Dimension(500,500));
        mainpanel.add(board);
        mainpanel.add(control);
        setResizable(false);
        add(mainpanel);
        pack();
        setLocationRelativeTo(null);
        setVisible(true);
    }
}


